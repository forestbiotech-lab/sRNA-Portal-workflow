#!/usr/bin/env python3

######################################
# Created by "Bruno Costa"@INESC
#    2018/02/02
#  for table in Mature_miRNA HasStar Feature Pre_miRNA Gene Genome Protein Organism Target Transcript; do Utilities/./createTable.py $table > components/miRNADB/sqldb/${table}.js;done
#
# Usage: createTable.py [table] [file]
# Usage: createTable.py all [file]
# Using with no table generates for all
#
# mysqldump -u [user] -h [host] -p [database]--no-data
######################################


import re
import sys
import os
import gzip
import zipfile
from operator import itemgetter
import datetime

x = datetime.datetime.now()



dir_path = os.path.dirname(os.path.realpath(__file__))
sqlFile=dir_path+"/../SQL/LATEST_dump.sql"



#Change this based on your project
variable_path="components/miRNADB"


tables=[]

if len(sys.argv)==2:
  tables=[sys.argv[1]]
elif(len(sys.argv)==3):
  if( [sys.argv[1]] != "all" ):
    tables=[sys.argv[1]]

  sqlFile=sys.argv[2]
else:
  tables=[]
  

def openSQLfile(file):
  f=re.compile('\.[a-zA-Z]+$')
  ext=f.findall(file)
  ext=ext[0]
  if( ext == ".zip" ):
    archive=zipfile.ZipFile(file,'r')
    firstFile=archive.namelist()[0]
    print(f"Opened first file in zip archive: {firstFile}")
    return archive.open(firstFile)
  elif( ext == ".gzip" ):
    return gzip.open(file, 'rb')
  else:
    return open(file,'r')

def loadContraints():
  sql=openSQLfile(sqlFile)
  extract=False
  foreignKeys={}
  table="unassigned"
  for line in sql.readlines(): 
    #line=line.decode('utf-8').strip()
    
    match=re.match(r"DROP TABLE IF EXISTS `(.*)`;",f"{line}")
    if(match):
      table=match.group(1)
      try:
        test=foreignKeys[table]
      except KeyError:
        foreignKeys[table]=[]
      continue

    if (re.match("CREATE TABLE ",line)):
      extract=True
      continue

    if (extract and re.match("\).*\;",line)):
      extract=False
      continue

    if( extract and re.match("\s*CONSTRAINT",line)):  
      fk=line.strip().split("`")
      #(0)CONSTRAINT `
      #(1)Pre_miRNA_fk2`
      #(2) FOREIGN KEY (`
      #(3)sequence_id`
      #(4)) REFERENCES `
      #(5)Pre_miRNA_sequence`
      #(6) (`
      #(7)id`)

      constraintOUT={
        'direction':"OUT",
        'foreignKey':fk[3],
        'table':table,
        'targetKey':fk[7],
        'targetTable':fk[5]
      }
      constraintIN={
        'direction':"IN",
        'foreignKey':fk[7],
        'table':fk[5],
        'targetKey':fk[3],
        'targetTable':table
      }
      foreignKeys[table].append(constraintOUT)
      inTable=constraintIN['table']
      try:
        foreignKeys[inTable].append(constraintIN)
      except KeyError:
        foreignKeys[inTable]=[constraintIN]
  return foreignKeys

def generateTable(table,output,foreignKeys):
  sql=openSQLfile(sqlFile)

  tableAttributes=[]
  extract=False
  for line in sql.readlines(): 
    line=line.strip()
    if (extract and re.match("\).*\;",line)):
      extract=False
      continue
    
    if (extract and not re.match("KEY|CONSTRAINT|PRIMARY|UNIQUE",line)):
      ##Attributes  
      parsed=line.strip().strip(',').replace("`","").split(" ")
      print(parsed)
      tableAttributes.append(parsed[0:2])
    
    if (re.match("CREATE TABLE `"+table+"`",line)):
      extract=True
  sql.close()  

  my_dict={'table': table}
  my_dict['date']=x.strftime("%Y-%m-%d")

  result="""/**
   * Created by Bruno Costa %(date)s
   * Generated by Utilities/createTable.py
   */
  'use strict';

  module.exports = function(sequelize, DataTypes) {
    const %(table)s = sequelize.define('%(table)s', {
      id: { 
        type: DataTypes.INTEGER(11),
        autoIncrement: true,
        primaryKey: true,
        allowNull: false,
        unique: true,
      },\n""" %my_dict
  for attribute, datatype in tableAttributes[1::]:
    #enum must not have spaces.
    attr={'attribute':attribute,'datatype':datatype.replace("tinyint","TINYINT").replace("int","INTEGER").replace("varchar","STRING").replace("datetime","DATE").replace("date","DATE").replace("text","TEXT").replace("float","FLOAT").replace("enum","ENUM").replace("binary","TINYINT")}
    result+="      %(attribute)s: DataTypes.%(datatype)s,\n" % attr

  result+="""    }, {
      tableName: '%(table)s',
      timestamps: false,
      underscored: false,

      classMethods: {
        associate: function associate(models) {    """ % my_dict

  ###Add ForeignKeys
  for  fk in foreignKeys[table]:
    result+="""
          %(table)s.belongsTo(models.%(targetTable)s, {
            foreignKey: '%(foreignKey)s',              //on %(table)s
            targetKey: '%(targetKey)s',  //foreign key  
          });""" % fk
  result+=""" 
        }
      },
    });

    return %(table)s;
  };""" % my_dict

  print(result)
  print(output)
  fw=open(output,"w")
  fw.write(result)
  fw.flush()
  fw.close()

if ( len(tables)==0 ) :
  sql=openSQLfile(sqlFile)
  for line in sql.readlines():
    line=line.strip()
    match=re.match(r"DROP TABLE IF EXISTS `(.*)`;",f"{line}")
    if(match):
      tables.append(match.group(1))
  sql.close()


foreignKeys=loadContraints()
for table in tables:
  current_table={'table':table}
  output=dir_path+"/../"+variable_path+"/sqldb/%(table)s.js" %current_table
  generateTable(table,output,foreignKeys)
