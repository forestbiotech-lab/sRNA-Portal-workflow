 //#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('srna-portal-workflow:server');
var http = require('http');
var lex = require('greenlock-express');

var email='brunovasquescosta@gmail.com';
var domains= [ 'srna-portal.biodata.pt'];

function approveDomains(opts, certs, cb) {
  // This is where you check your database and associated
  // email addresses with domains and agreements and such



  // The domains being approved for the first time are listed in opts.domains
  // Certs being renewed are listed in certs.altnames
  if (certs) {
    opts.domains = certs.altnames;
  }

  checkDomains(opts.domains, function(err,agree, email){
    if (err) { 
      cb(err) 
      return
    }    
    opts.email = email;
    opts.agreeTos = agree;

    cb(null, {options:opts, certs:certs})
  })
}


function checkDomains(certDomains, cb){
  console.log(certDomains)
  var officialDomains = domains  //reinforcing that it's the user defined ones or DB list
  var userEmail=email 
  var userAgrees=true;
  var passCheck = certDomains.every(function (domain){
    return -1 !== officialDomains.indexOf(domain);
  })

  if (passCheck){
    cb(null, userAgrees, userEmail)
  }else{
    cb(new Error('domain not allowed'))
  }

}




var options={
  server: 'https://acme-v02.api.letsencrypt.org/directory'
  ,version: 'draft-12'
  ,configDir: '~/.config/acme/'
  ,store: require('greenlock-store-fs')
  ,app: app
  ,approveDomains: approveDomains
  ,communityMember: true
}


var port_http = normalizePort(process.env.PORT_HTTP || '80');
var port_https = normalizePort(process.env.PORT_HTTPS || '443');

var server = process.env.mode=="PRODUCTION" ? lex.create(options) : http.createServer(app);



function productionServer(lex){
  console.log("Running PRODUCTION mode")
  lex.listen(port_http,port_https);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port_http === 'string'
    ? 'Pipe ' + port_http
    : 'Port ' + port_http;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = process.env.address || server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function localServer(server){
  console.log("Running in LOCAL mode")
  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */


  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port_http);
  server.on('error', onError);
  server.on('listening', onListening);
}


//Start server
process.env.mode == "PRODUCTION" ? productionServer(server) : localServer(server);
