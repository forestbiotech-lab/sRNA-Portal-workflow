#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('srna-portal-workflow:server');
var http = require('http');
var https = require('https');
var lex = require('letsencrypt-express');


function approveDomains(opts, certs, cb) {
  // This is where you check your database and associated
  // email addresses with domains and agreements and such


  // The domains being approved for the first time are listed in opts.domains
  // Certs being renewed are listed in certs.altnames
  if (certs) {
    opts.domains = certs.altnames;
  }
  else {
    opts.email = 'brunovasquescosta@gmail.com';
    opts.agreeTos = true;
    opts.approveDomains= [ 'srna-portal.biodata.pt'];
  }
  // NOTE: you can also change other options such as `challengeType` and `challenge`
  opts.challengeType = 'http-01';
  opts.challenge = require('le-challenge-fs').create({});

  cb(null, { options: opts, certs: certs });
}




var options={
  server: 'https://acme-v01.api.letsencrypt.org/directory'

, challenges: { 'http-01': require('le-challenge-fs').create({ webrootPath: '/tmp/acme-challenges' }) }  //,loopback(opts, domain, token, keyAuthorization, cb)
, store: require('le-store-certbot').create({ webrootPath: '/tmp/acme-challenges' })

// You probably wouldn't need to replace the default sni handler
// See https://github.com/Daplie/le-sni-auto if you think you do
//, sni: require('le-sni-auto').create({})

, approveDomains: approveDomains
}


if (process.env.mode=="PRODUCTION") var lex = lex.create(options);
/**
 * Get port from environment and store in Express.
 */

var port_http = normalizePort(process.env.PORT_HTTP || '80');
var port_https = normalizePort(process.env.PORT_HTTPS || '443');
//app.set('port', port_http);


var http_server = process.env.mode=="PRODUCTION" ? http.createServer(lex.middleware(require('redirect-https')())) : http.createServer(app);

function productionServer(http_server){
  console.log("Running PRODUCTION mode")
  /**
   * Create HTTP server.
   */
  // handles acme-challenge and redirects to https
  http_server.listen(port_http, function () {
    console.log("Listening for ACME http-01 challenges on", this.address());
  });
  
  
  // handles your app
  var lex_server=https.createServer(lex.httpsOptions, lex.middleware(app))
  
  
  
  
  /**
   * Listen on provided port, on all network interfaces.
   */
  lex_server.listen(port_https, function () {
    console.log("Listening for ACME tls-sni-01 challenges and serve app on", this.address());
  });
  lex_server.on('error', onError);
  lex_server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = process.env.address || http_server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function localServer(server){
  console.log("Running in LOCAL mode")
  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */


  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}


//Start server
process.env.mode == "PRODUCTION" ? productionServer(http_server) : localServer(http_server);
